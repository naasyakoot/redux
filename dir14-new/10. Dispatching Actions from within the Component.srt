1
00:00:02,340 --> 00:00:08,680
So we did get our slice of the state here and output it with the ctr props,

2
00:00:09,060 --> 00:00:12,030
now I also want to be able to dispatch actions

3
00:00:12,630 --> 00:00:20,790
and for that, we need to find out how we can also dispatch actions from within our components.

4
00:00:20,820 --> 00:00:27,350
Now when we just use redux in standalone, we simply called dispatch on the store.

5
00:00:27,570 --> 00:00:31,760
Now we don't have access to the store in our container at least not directly,

6
00:00:31,860 --> 00:00:33,900
we got access through connect though

7
00:00:34,140 --> 00:00:40,630
and just as we were able to pass some information about which kind of state or which slice of the state

8
00:00:40,630 --> 00:00:44,820
you want to get, we can also pass a second configuration,

9
00:00:44,910 --> 00:00:53,010
I'll name it mapDispatchToProps because here I'll say which kind of actions do I want to dispatch

10
00:00:53,100 --> 00:00:55,190
in this container.

11
00:00:55,230 --> 00:01:03,630
This also stores a function which will receive the dispatch function which we can execute as an argument,

12
00:01:04,320 --> 00:01:07,570
just as we have dispatch available on the store here,

13
00:01:07,620 --> 00:01:15,000
if we directly access the store, the react-redux package gives us well basically this helper function

14
00:01:15,210 --> 00:01:19,200
which will call dispatch on the store behind the scenes.

15
00:01:19,440 --> 00:01:25,860
We then here also return a javascript object where we can define some prop names which will hold

16
00:01:25,890 --> 00:01:32,360
a reference to a function which should eventually get executed to dispatch an action.

17
00:01:32,370 --> 00:01:37,780
Now you can choose any property name you want here, I'll name it onIncrementCounter,

18
00:01:37,800 --> 00:01:39,410
but again, the name is up to you.

19
00:01:39,510 --> 00:01:46,110
This property now holds a value of course and that value should be an anonymous function,

20
00:01:46,140 --> 00:01:50,010
so here I'll use a ES6 arrow function like this

21
00:01:50,010 --> 00:01:54,870
and I'll use the very short version where if it's written in one line, the part on the right side of

22
00:01:54,870 --> 00:01:57,790
the arrow is automatically returned.

23
00:01:57,900 --> 00:02:01,000
So here, I want to return a call to dispatch

24
00:02:01,650 --> 00:02:03,970
and this is the call, what I want to do here,

25
00:02:04,380 --> 00:02:12,230
this function here will in the end be available through this property and therefore, whenever this property

26
00:02:12,510 --> 00:02:14,430
is executed as a function,

27
00:02:14,430 --> 00:02:20,890
for example, if we assign it to an onClick handler, then this dispatch method here is going to get executed.

28
00:02:21,330 --> 00:02:26,700
And to this method, I can now pass a javascript object where we need to set up a type

29
00:02:26,700 --> 00:02:34,480
as you learned and I'll set the type to increment here. With that, we got a property we can also use in our

30
00:02:34,480 --> 00:02:35,300
container,

31
00:02:35,470 --> 00:02:40,690
well at least we can do so when we pass it as a second argument to connect.

32
00:02:40,690 --> 00:02:46,960
And by the way, if you ever have a case where you don't have any actions in your container, you just leave

33
00:02:46,960 --> 00:02:52,960
it out as we did before or if you have a container which only needs to dispatch actions but doesn't

34
00:02:52,960 --> 00:02:57,950
need a slice of the state, you'll simply pass null as the first argument to connect,

35
00:02:58,120 --> 00:02:59,700
just as a side note.

36
00:03:00,250 --> 00:03:05,860
So back to our set up though, now I'm passing mapDispatchToProps to the connect method too

37
00:03:05,980 --> 00:03:09,730
and with that, I get access to the onIncrementCounter method here.

38
00:03:09,730 --> 00:03:11,490
So let's use that property,

39
00:03:11,770 --> 00:03:17,440
I'll copy the name onIncrementCounter and I want to use it here in my counter control, where I

40
00:03:17,440 --> 00:03:24,640
have the increment button. Here right now on the click prop which is just a prop I passed the reference

41
00:03:24,640 --> 00:03:30,250
what I want to execute onClick down to counter control, so I can pass a function which should be executed

42
00:03:30,300 --> 00:03:32,640
when I click to this prop. Here,

43
00:03:32,650 --> 00:03:39,970
I now want to pass no longer this anonymous function but this onIncrementCounter, without executing

44
00:03:39,970 --> 00:03:40,160
it

45
00:03:40,210 --> 00:03:42,340
so without parentheses, just like this.

46
00:03:42,490 --> 00:03:48,460
This will then refer to this prop which holds a reference to this anonymous function which will then

47
00:03:48,460 --> 00:03:55,300
be executed which will then dispatch this action. With that we're dispatching an action,

48
00:03:55,300 --> 00:04:01,040
now let's also see how to changes this the counter by going back to the reducer

49
00:04:01,150 --> 00:04:04,210
and of course adjusting it to handle this action.

50
00:04:04,210 --> 00:04:12,340
So here, I'll add an if statement to check the action type, like that and I'll see if the action type is equal

51
00:04:12,340 --> 00:04:13,110
to

52
00:04:13,390 --> 00:04:19,060
and now I need to take the same identifier as specified here because that is of course the identifier

53
00:04:19,090 --> 00:04:21,100
identifying this exact action,

54
00:04:21,100 --> 00:04:23,530
so one typo and it won't work.

55
00:04:23,780 --> 00:04:31,180
So I'll copy the increment text and I'll check for the action type being equal to that, inside of here,

56
00:04:31,540 --> 00:04:38,230
I then want to return my updated state immutably by creating a new javascript object and I don't even

57
00:04:38,230 --> 00:04:40,070
need to copy my old states here

58
00:04:40,090 --> 00:04:42,060
first, though we could do that,

59
00:04:42,340 --> 00:04:48,430
for now, I'll simply return a new object with the counter property because that's the equivalent to copying

60
00:04:48,430 --> 00:04:52,880
everything because we only have the counter property in our old state anyways.

61
00:04:53,290 --> 00:05:00,010
So here, I'll return counter and set this equal to state.counter plus one, like that.

62
00:05:00,400 --> 00:05:08,070
So with that, the reducer is set up, if we go back to the counter container, make sure onIncrementCounter here should dispatch

63
00:05:08,100 --> 00:05:09,520
this action.

64
00:05:09,520 --> 00:05:17,010
Now if we have a look, oh here's here's a mistake by the way, clicked where we refer to onIncrementCounter,

65
00:05:17,090 --> 00:05:22,680
this of course is not a class method as it would have to be if we call it like this,

66
00:05:22,700 --> 00:05:24,270
it's passed via props.

67
00:05:24,440 --> 00:05:32,030
So this.props.onIncrementCounter is correct because it's just a property we receive, a property holding

68
00:05:32,030 --> 00:05:34,720
a reference to this function.

69
00:05:34,730 --> 00:05:40,490
Now with these changes in place, if we save everything, save all files and go back to the application, we'll

70
00:05:40,490 --> 00:05:41,320
see that none of these buttons

71
00:05:41,390 --> 00:05:48,710
does anything but the increment button does, it increments the counter but now managed through redux.

72
00:05:48,860 --> 00:05:49,850
This is awesome,

73
00:05:49,850 --> 00:05:51,310
now let's practice this a bit.
